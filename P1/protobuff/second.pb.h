// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: second.proto
// Protobuf C++ Version: 6.33.0-dev

#ifndef second_2eproto_2epb_2eh
#define second_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6033000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_second_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_second_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_second_2eproto;
}  // extern "C"
namespace sample {
class Born2;
struct Born2DefaultTypeInternal;
extern Born2DefaultTypeInternal _Born2_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Born2_class_data_;
class Car2;
struct Car2DefaultTypeInternal;
extern Car2DefaultTypeInternal _Car2_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Car2_class_data_;
class Home2;
struct Home2DefaultTypeInternal;
extern Home2DefaultTypeInternal _Home2_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Home2_class_data_;
class PeopleSecond;
struct PeopleSecondDefaultTypeInternal;
extern PeopleSecondDefaultTypeInternal _PeopleSecond_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull PeopleSecond_class_data_;
class PersonSecond;
struct PersonSecondDefaultTypeInternal;
extern PersonSecondDefaultTypeInternal _PersonSecond_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull PersonSecond_class_data_;
}  // namespace sample
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sample {

// ===================================================================


// -------------------------------------------------------------------

class Home2 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sample.Home2) */ {
 public:
  inline Home2() : Home2(nullptr) {}
  ~Home2() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Home2* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Home2));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Home2(::google::protobuf::internal::ConstantInitialized);

  inline Home2(const Home2& from) : Home2(nullptr, from) {}
  inline Home2(Home2&& from) noexcept
      : Home2(nullptr, ::std::move(from)) {}
  inline Home2& operator=(const Home2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Home2& operator=(Home2&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Home2& default_instance() {
    return *reinterpret_cast<const Home2*>(
        &_Home2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Home2& a, Home2& b) { a.Swap(&b); }
  inline void Swap(Home2* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Home2* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Home2* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Home2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Home2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Home2& from) { Home2::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Home2* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sample.Home2"; }

  explicit Home2(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Home2(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Home2& from);
  Home2(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Home2&& from) noexcept
      : Home2(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
    kOwnershipFieldNumber = 2,
  };
  // string address = 1;
  void clear_address() ;
  const ::std::string& address() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_address();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_address();
  void set_allocated_address(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_address() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_address(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_address();

  public:
  // string ownership = 2;
  void clear_ownership() ;
  const ::std::string& ownership() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_ownership(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_ownership();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_ownership();
  void set_allocated_ownership(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_ownership() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_ownership(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_ownership();

  public:
  // @@protoc_insertion_point(class_scope:sample.Home2)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 37,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Home2& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr ownership_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_second_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Home2_class_data_;
// -------------------------------------------------------------------

class Car2 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sample.Car2) */ {
 public:
  inline Car2() : Car2(nullptr) {}
  ~Car2() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Car2* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Car2));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Car2(::google::protobuf::internal::ConstantInitialized);

  inline Car2(const Car2& from) : Car2(nullptr, from) {}
  inline Car2(Car2&& from) noexcept
      : Car2(nullptr, ::std::move(from)) {}
  inline Car2& operator=(const Car2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Car2& operator=(Car2&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Car2& default_instance() {
    return *reinterpret_cast<const Car2*>(
        &_Car2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Car2& a, Car2& b) { a.Swap(&b); }
  inline void Swap(Car2* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Car2* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Car2* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Car2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Car2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Car2& from) { Car2::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Car2* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sample.Car2"; }

  explicit Car2(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Car2(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Car2& from);
  Car2(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Car2&& from) noexcept
      : Car2(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModelNameFieldNumber = 1,
    kLicensePlateFieldNumber = 3,
    kFactoryYearFieldNumber = 2,
  };
  // string model_name = 1;
  void clear_model_name() ;
  const ::std::string& model_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_model_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_model_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_model_name();
  void set_allocated_model_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_model_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_model_name();

  public:
  // string license_plate = 3;
  void clear_license_plate() ;
  const ::std::string& license_plate() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_license_plate(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_license_plate();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_license_plate();
  void set_allocated_license_plate(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_license_plate() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_license_plate(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_license_plate();

  public:
  // int32 factory_year = 2;
  void clear_factory_year() ;
  ::int32_t factory_year() const;
  void set_factory_year(::int32_t value);

  private:
  ::int32_t _internal_factory_year() const;
  void _internal_set_factory_year(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sample.Car2)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 43,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Car2& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr model_name_;
    ::google::protobuf::internal::ArenaStringPtr license_plate_;
    ::int32_t factory_year_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_second_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Car2_class_data_;
// -------------------------------------------------------------------

class Born2 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sample.Born2) */ {
 public:
  inline Born2() : Born2(nullptr) {}
  ~Born2() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Born2* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Born2));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Born2(::google::protobuf::internal::ConstantInitialized);

  inline Born2(const Born2& from) : Born2(nullptr, from) {}
  inline Born2(Born2&& from) noexcept
      : Born2(nullptr, ::std::move(from)) {}
  inline Born2& operator=(const Born2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Born2& operator=(Born2&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Born2& default_instance() {
    return *reinterpret_cast<const Born2*>(
        &_Born2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Born2& a, Born2& b) { a.Swap(&b); }
  inline void Swap(Born2* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Born2* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Born2* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Born2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Born2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Born2& from) { Born2::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Born2* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sample.Born2"; }

  explicit Born2(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Born2(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Born2& from);
  Born2(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Born2&& from) noexcept
      : Born2(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDateFieldNumber = 1,
    kCityFieldNumber = 2,
    kHospitalNameFieldNumber = 3,
    kFatherNameFieldNumber = 4,
  };
  // string date = 1;
  void clear_date() ;
  const ::std::string& date() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_date(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_date();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_date();
  void set_allocated_date(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_date() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_date(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_date();

  public:
  // string city = 2;
  void clear_city() ;
  const ::std::string& city() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_city(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_city();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_city();
  void set_allocated_city(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_city() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_city(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_city();

  public:
  // string hospital_name = 3;
  void clear_hospital_name() ;
  const ::std::string& hospital_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_hospital_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_hospital_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_hospital_name();
  void set_allocated_hospital_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_hospital_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_hospital_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_hospital_name();

  public:
  // string father_name = 4;
  void clear_father_name() ;
  const ::std::string& father_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_father_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_father_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_father_name();
  void set_allocated_father_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_father_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_father_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_father_name();

  public:
  // @@protoc_insertion_point(class_scope:sample.Born2)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 53,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Born2& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr date_;
    ::google::protobuf::internal::ArenaStringPtr city_;
    ::google::protobuf::internal::ArenaStringPtr hospital_name_;
    ::google::protobuf::internal::ArenaStringPtr father_name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_second_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Born2_class_data_;
// -------------------------------------------------------------------

class PersonSecond final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sample.PersonSecond) */ {
 public:
  inline PersonSecond() : PersonSecond(nullptr) {}
  ~PersonSecond() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PersonSecond* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PersonSecond));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PersonSecond(::google::protobuf::internal::ConstantInitialized);

  inline PersonSecond(const PersonSecond& from) : PersonSecond(nullptr, from) {}
  inline PersonSecond(PersonSecond&& from) noexcept
      : PersonSecond(nullptr, ::std::move(from)) {}
  inline PersonSecond& operator=(const PersonSecond& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonSecond& operator=(PersonSecond&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersonSecond& default_instance() {
    return *reinterpret_cast<const PersonSecond*>(
        &_PersonSecond_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PersonSecond& a, PersonSecond& b) { a.Swap(&b); }
  inline void Swap(PersonSecond* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonSecond* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersonSecond* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PersonSecond>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PersonSecond& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PersonSecond& from) { PersonSecond::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PersonSecond* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sample.PersonSecond"; }

  explicit PersonSecond(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  PersonSecond(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const PersonSecond& from);
  PersonSecond(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, PersonSecond&& from) noexcept
      : PersonSecond(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kBornFieldNumber = 2,
    kCarFieldNumber = 3,
    kHomeFieldNumber = 4,
  };
  // string name = 1;
  void clear_name() ;
  const ::std::string& name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // .sample.Born2 born = 2;
  bool has_born() const;
  void clear_born() ;
  const ::sample::Born2& born() const;
  [[nodiscard]] ::sample::Born2* PROTOBUF_NULLABLE release_born();
  ::sample::Born2* PROTOBUF_NONNULL mutable_born();
  void set_allocated_born(::sample::Born2* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_born(::sample::Born2* PROTOBUF_NULLABLE value);
  ::sample::Born2* PROTOBUF_NULLABLE unsafe_arena_release_born();

  private:
  const ::sample::Born2& _internal_born() const;
  ::sample::Born2* PROTOBUF_NONNULL _internal_mutable_born();

  public:
  // .sample.Car2 car = 3;
  bool has_car() const;
  void clear_car() ;
  const ::sample::Car2& car() const;
  [[nodiscard]] ::sample::Car2* PROTOBUF_NULLABLE release_car();
  ::sample::Car2* PROTOBUF_NONNULL mutable_car();
  void set_allocated_car(::sample::Car2* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_car(::sample::Car2* PROTOBUF_NULLABLE value);
  ::sample::Car2* PROTOBUF_NULLABLE unsafe_arena_release_car();

  private:
  const ::sample::Car2& _internal_car() const;
  ::sample::Car2* PROTOBUF_NONNULL _internal_mutable_car();

  public:
  // .sample.Home2 home = 4;
  bool has_home() const;
  void clear_home() ;
  const ::sample::Home2& home() const;
  [[nodiscard]] ::sample::Home2* PROTOBUF_NULLABLE release_home();
  ::sample::Home2* PROTOBUF_NONNULL mutable_home();
  void set_allocated_home(::sample::Home2* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_home(::sample::Home2* PROTOBUF_NULLABLE value);
  ::sample::Home2* PROTOBUF_NULLABLE unsafe_arena_release_home();

  private:
  const ::sample::Home2& _internal_home() const;
  ::sample::Home2* PROTOBUF_NONNULL _internal_mutable_home();

  public:
  // @@protoc_insertion_point(class_scope:sample.PersonSecond)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   3, 32,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const PersonSecond& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::sample::Born2* PROTOBUF_NULLABLE born_;
    ::sample::Car2* PROTOBUF_NULLABLE car_;
    ::sample::Home2* PROTOBUF_NULLABLE home_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_second_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull PersonSecond_class_data_;
// -------------------------------------------------------------------

class PeopleSecond final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sample.PeopleSecond) */ {
 public:
  inline PeopleSecond() : PeopleSecond(nullptr) {}
  ~PeopleSecond() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PeopleSecond* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PeopleSecond));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PeopleSecond(::google::protobuf::internal::ConstantInitialized);

  inline PeopleSecond(const PeopleSecond& from) : PeopleSecond(nullptr, from) {}
  inline PeopleSecond(PeopleSecond&& from) noexcept
      : PeopleSecond(nullptr, ::std::move(from)) {}
  inline PeopleSecond& operator=(const PeopleSecond& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeopleSecond& operator=(PeopleSecond&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeopleSecond& default_instance() {
    return *reinterpret_cast<const PeopleSecond*>(
        &_PeopleSecond_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(PeopleSecond& a, PeopleSecond& b) { a.Swap(&b); }
  inline void Swap(PeopleSecond* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeopleSecond* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeopleSecond* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PeopleSecond>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PeopleSecond& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PeopleSecond& from) { PeopleSecond::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PeopleSecond* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sample.PeopleSecond"; }

  explicit PeopleSecond(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  PeopleSecond(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const PeopleSecond& from);
  PeopleSecond(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, PeopleSecond&& from) noexcept
      : PeopleSecond(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPeopleFieldNumber = 1,
  };
  // repeated .sample.PersonSecond people = 1;
  int people_size() const;
  private:
  int _internal_people_size() const;

  public:
  void clear_people() ;
  ::sample::PersonSecond* PROTOBUF_NONNULL mutable_people(int index);
  ::google::protobuf::RepeatedPtrField<::sample::PersonSecond>* PROTOBUF_NONNULL mutable_people();

  private:
  const ::google::protobuf::RepeatedPtrField<::sample::PersonSecond>& _internal_people() const;
  ::google::protobuf::RepeatedPtrField<::sample::PersonSecond>* PROTOBUF_NONNULL _internal_mutable_people();
  public:
  const ::sample::PersonSecond& people(int index) const;
  ::sample::PersonSecond* PROTOBUF_NONNULL add_people();
  const ::google::protobuf::RepeatedPtrField<::sample::PersonSecond>& people() const;
  // @@protoc_insertion_point(class_scope:sample.PeopleSecond)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const PeopleSecond& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sample::PersonSecond > people_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_second_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull PeopleSecond_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Born2

// string date = 1;
inline void Born2::clear_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000001U);
}
inline const ::std::string& Born2::date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.Born2.date)
  return _internal_date();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Born2::set_date(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  _impl_.date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sample.Born2.date)
}
inline ::std::string* PROTOBUF_NONNULL Born2::mutable_date()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:sample.Born2.date)
  return _s;
}
inline const ::std::string& Born2::_internal_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.date_.Get();
}
inline void Born2::_internal_set_date(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Born2::_internal_mutable_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.date_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Born2::release_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sample.Born2.date)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000001U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  auto* released = _impl_.date_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.date_.Set("", GetArena());
  }
  return released;
}
inline void Born2::set_allocated_date(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  }
  _impl_.date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sample.Born2.date)
}

// string city = 2;
inline void Born2::clear_city() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.city_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000002U);
}
inline const ::std::string& Born2::city() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.Born2.city)
  return _internal_city();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Born2::set_city(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  _impl_.city_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sample.Born2.city)
}
inline ::std::string* PROTOBUF_NONNULL Born2::mutable_city()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  ::std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:sample.Born2.city)
  return _s;
}
inline const ::std::string& Born2::_internal_city() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.city_.Get();
}
inline void Born2::_internal_set_city(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.city_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Born2::_internal_mutable_city() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.city_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Born2::release_city() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sample.Born2.city)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000002U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  auto* released = _impl_.city_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.city_.Set("", GetArena());
  }
  return released;
}
inline void Born2::set_allocated_city(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  }
  _impl_.city_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.city_.IsDefault()) {
    _impl_.city_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sample.Born2.city)
}

// string hospital_name = 3;
inline void Born2::clear_hospital_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hospital_name_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000004U);
}
inline const ::std::string& Born2::hospital_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.Born2.hospital_name)
  return _internal_hospital_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Born2::set_hospital_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000004U);
  _impl_.hospital_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sample.Born2.hospital_name)
}
inline ::std::string* PROTOBUF_NONNULL Born2::mutable_hospital_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000004U);
  ::std::string* _s = _internal_mutable_hospital_name();
  // @@protoc_insertion_point(field_mutable:sample.Born2.hospital_name)
  return _s;
}
inline const ::std::string& Born2::_internal_hospital_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hospital_name_.Get();
}
inline void Born2::_internal_set_hospital_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hospital_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Born2::_internal_mutable_hospital_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hospital_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Born2::release_hospital_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sample.Born2.hospital_name)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000004U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000004U);
  auto* released = _impl_.hospital_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.hospital_name_.Set("", GetArena());
  }
  return released;
}
inline void Born2::set_allocated_hospital_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000004U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000004U);
  }
  _impl_.hospital_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hospital_name_.IsDefault()) {
    _impl_.hospital_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sample.Born2.hospital_name)
}

// string father_name = 4;
inline void Born2::clear_father_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.father_name_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000008U);
}
inline const ::std::string& Born2::father_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.Born2.father_name)
  return _internal_father_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Born2::set_father_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000008U);
  _impl_.father_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sample.Born2.father_name)
}
inline ::std::string* PROTOBUF_NONNULL Born2::mutable_father_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000008U);
  ::std::string* _s = _internal_mutable_father_name();
  // @@protoc_insertion_point(field_mutable:sample.Born2.father_name)
  return _s;
}
inline const ::std::string& Born2::_internal_father_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.father_name_.Get();
}
inline void Born2::_internal_set_father_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.father_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Born2::_internal_mutable_father_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.father_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Born2::release_father_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sample.Born2.father_name)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000008U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000008U);
  auto* released = _impl_.father_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.father_name_.Set("", GetArena());
  }
  return released;
}
inline void Born2::set_allocated_father_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000008U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000008U);
  }
  _impl_.father_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.father_name_.IsDefault()) {
    _impl_.father_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sample.Born2.father_name)
}

// -------------------------------------------------------------------

// Car2

// string model_name = 1;
inline void Car2::clear_model_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_name_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000001U);
}
inline const ::std::string& Car2::model_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.Car2.model_name)
  return _internal_model_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Car2::set_model_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  _impl_.model_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sample.Car2.model_name)
}
inline ::std::string* PROTOBUF_NONNULL Car2::mutable_model_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:sample.Car2.model_name)
  return _s;
}
inline const ::std::string& Car2::_internal_model_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.model_name_.Get();
}
inline void Car2::_internal_set_model_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Car2::_internal_mutable_model_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.model_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Car2::release_model_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sample.Car2.model_name)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000001U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  auto* released = _impl_.model_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.model_name_.Set("", GetArena());
  }
  return released;
}
inline void Car2::set_allocated_model_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  }
  _impl_.model_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sample.Car2.model_name)
}

// int32 factory_year = 2;
inline void Car2::clear_factory_year() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.factory_year_ = 0;
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000004U);
}
inline ::int32_t Car2::factory_year() const {
  // @@protoc_insertion_point(field_get:sample.Car2.factory_year)
  return _internal_factory_year();
}
inline void Car2::set_factory_year(::int32_t value) {
  _internal_set_factory_year(value);
  SetHasBit(_impl_._has_bits_[0], 0x00000004U);
  // @@protoc_insertion_point(field_set:sample.Car2.factory_year)
}
inline ::int32_t Car2::_internal_factory_year() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.factory_year_;
}
inline void Car2::_internal_set_factory_year(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.factory_year_ = value;
}

// string license_plate = 3;
inline void Car2::clear_license_plate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_plate_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000002U);
}
inline const ::std::string& Car2::license_plate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.Car2.license_plate)
  return _internal_license_plate();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Car2::set_license_plate(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  _impl_.license_plate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sample.Car2.license_plate)
}
inline ::std::string* PROTOBUF_NONNULL Car2::mutable_license_plate()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  ::std::string* _s = _internal_mutable_license_plate();
  // @@protoc_insertion_point(field_mutable:sample.Car2.license_plate)
  return _s;
}
inline const ::std::string& Car2::_internal_license_plate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.license_plate_.Get();
}
inline void Car2::_internal_set_license_plate(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_plate_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Car2::_internal_mutable_license_plate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.license_plate_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Car2::release_license_plate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sample.Car2.license_plate)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000002U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  auto* released = _impl_.license_plate_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.license_plate_.Set("", GetArena());
  }
  return released;
}
inline void Car2::set_allocated_license_plate(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  }
  _impl_.license_plate_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.license_plate_.IsDefault()) {
    _impl_.license_plate_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sample.Car2.license_plate)
}

// -------------------------------------------------------------------

// Home2

// string address = 1;
inline void Home2::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000001U);
}
inline const ::std::string& Home2::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.Home2.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Home2::set_address(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sample.Home2.address)
}
inline ::std::string* PROTOBUF_NONNULL Home2::mutable_address()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:sample.Home2.address)
  return _s;
}
inline const ::std::string& Home2::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void Home2::_internal_set_address(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Home2::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Home2::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sample.Home2.address)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000001U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  auto* released = _impl_.address_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.address_.Set("", GetArena());
  }
  return released;
}
inline void Home2::set_allocated_address(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  }
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sample.Home2.address)
}

// string ownership = 2;
inline void Home2::clear_ownership() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ownership_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000002U);
}
inline const ::std::string& Home2::ownership() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.Home2.ownership)
  return _internal_ownership();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Home2::set_ownership(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  _impl_.ownership_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sample.Home2.ownership)
}
inline ::std::string* PROTOBUF_NONNULL Home2::mutable_ownership()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  ::std::string* _s = _internal_mutable_ownership();
  // @@protoc_insertion_point(field_mutable:sample.Home2.ownership)
  return _s;
}
inline const ::std::string& Home2::_internal_ownership() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ownership_.Get();
}
inline void Home2::_internal_set_ownership(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ownership_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Home2::_internal_mutable_ownership() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ownership_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Home2::release_ownership() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sample.Home2.ownership)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000002U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  auto* released = _impl_.ownership_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.ownership_.Set("", GetArena());
  }
  return released;
}
inline void Home2::set_allocated_ownership(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  }
  _impl_.ownership_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ownership_.IsDefault()) {
    _impl_.ownership_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sample.Home2.ownership)
}

// -------------------------------------------------------------------

// PersonSecond

// string name = 1;
inline void PersonSecond::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000001U);
}
inline const ::std::string& PersonSecond::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.PersonSecond.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void PersonSecond::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sample.PersonSecond.name)
}
inline ::std::string* PROTOBUF_NONNULL PersonSecond::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sample.PersonSecond.name)
  return _s;
}
inline const ::std::string& PersonSecond::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void PersonSecond::_internal_set_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL PersonSecond::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE PersonSecond::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sample.PersonSecond.name)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000001U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void PersonSecond::set_allocated_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sample.PersonSecond.name)
}

// .sample.Born2 born = 2;
inline bool PersonSecond::has_born() const {
  bool value = CheckHasBit(_impl_._has_bits_[0], 0x00000002U);
  PROTOBUF_ASSUME(!value || _impl_.born_ != nullptr);
  return value;
}
inline void PersonSecond::clear_born() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.born_ != nullptr) _impl_.born_->Clear();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000002U);
}
inline const ::sample::Born2& PersonSecond::_internal_born() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sample::Born2* p = _impl_.born_;
  return p != nullptr ? *p : reinterpret_cast<const ::sample::Born2&>(::sample::_Born2_default_instance_);
}
inline const ::sample::Born2& PersonSecond::born() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.PersonSecond.born)
  return _internal_born();
}
inline void PersonSecond::unsafe_arena_set_allocated_born(
    ::sample::Born2* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.born_);
  }
  _impl_.born_ = reinterpret_cast<::sample::Born2*>(value);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sample.PersonSecond.born)
}
inline ::sample::Born2* PROTOBUF_NULLABLE PersonSecond::release_born() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  ::sample::Born2* released = _impl_.born_;
  _impl_.born_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sample::Born2* PROTOBUF_NULLABLE PersonSecond::unsafe_arena_release_born() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sample.PersonSecond.born)

  ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  ::sample::Born2* temp = _impl_.born_;
  _impl_.born_ = nullptr;
  return temp;
}
inline ::sample::Born2* PROTOBUF_NONNULL PersonSecond::_internal_mutable_born() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.born_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sample::Born2>(GetArena());
    _impl_.born_ = reinterpret_cast<::sample::Born2*>(p);
  }
  return _impl_.born_;
}
inline ::sample::Born2* PROTOBUF_NONNULL PersonSecond::mutable_born()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  ::sample::Born2* _msg = _internal_mutable_born();
  // @@protoc_insertion_point(field_mutable:sample.PersonSecond.born)
  return _msg;
}
inline void PersonSecond::set_allocated_born(::sample::Born2* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.born_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  }

  _impl_.born_ = reinterpret_cast<::sample::Born2*>(value);
  // @@protoc_insertion_point(field_set_allocated:sample.PersonSecond.born)
}

// .sample.Car2 car = 3;
inline bool PersonSecond::has_car() const {
  bool value = CheckHasBit(_impl_._has_bits_[0], 0x00000004U);
  PROTOBUF_ASSUME(!value || _impl_.car_ != nullptr);
  return value;
}
inline void PersonSecond::clear_car() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.car_ != nullptr) _impl_.car_->Clear();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000004U);
}
inline const ::sample::Car2& PersonSecond::_internal_car() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sample::Car2* p = _impl_.car_;
  return p != nullptr ? *p : reinterpret_cast<const ::sample::Car2&>(::sample::_Car2_default_instance_);
}
inline const ::sample::Car2& PersonSecond::car() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.PersonSecond.car)
  return _internal_car();
}
inline void PersonSecond::unsafe_arena_set_allocated_car(
    ::sample::Car2* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.car_);
  }
  _impl_.car_ = reinterpret_cast<::sample::Car2*>(value);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000004U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000004U);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sample.PersonSecond.car)
}
inline ::sample::Car2* PROTOBUF_NULLABLE PersonSecond::release_car() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  ClearHasBit(_impl_._has_bits_[0], 0x00000004U);
  ::sample::Car2* released = _impl_.car_;
  _impl_.car_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sample::Car2* PROTOBUF_NULLABLE PersonSecond::unsafe_arena_release_car() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sample.PersonSecond.car)

  ClearHasBit(_impl_._has_bits_[0], 0x00000004U);
  ::sample::Car2* temp = _impl_.car_;
  _impl_.car_ = nullptr;
  return temp;
}
inline ::sample::Car2* PROTOBUF_NONNULL PersonSecond::_internal_mutable_car() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.car_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sample::Car2>(GetArena());
    _impl_.car_ = reinterpret_cast<::sample::Car2*>(p);
  }
  return _impl_.car_;
}
inline ::sample::Car2* PROTOBUF_NONNULL PersonSecond::mutable_car()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000004U);
  ::sample::Car2* _msg = _internal_mutable_car();
  // @@protoc_insertion_point(field_mutable:sample.PersonSecond.car)
  return _msg;
}
inline void PersonSecond::set_allocated_car(::sample::Car2* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.car_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    SetHasBit(_impl_._has_bits_[0], 0x00000004U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000004U);
  }

  _impl_.car_ = reinterpret_cast<::sample::Car2*>(value);
  // @@protoc_insertion_point(field_set_allocated:sample.PersonSecond.car)
}

// .sample.Home2 home = 4;
inline bool PersonSecond::has_home() const {
  bool value = CheckHasBit(_impl_._has_bits_[0], 0x00000008U);
  PROTOBUF_ASSUME(!value || _impl_.home_ != nullptr);
  return value;
}
inline void PersonSecond::clear_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.home_ != nullptr) _impl_.home_->Clear();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000008U);
}
inline const ::sample::Home2& PersonSecond::_internal_home() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sample::Home2* p = _impl_.home_;
  return p != nullptr ? *p : reinterpret_cast<const ::sample::Home2&>(::sample::_Home2_default_instance_);
}
inline const ::sample::Home2& PersonSecond::home() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.PersonSecond.home)
  return _internal_home();
}
inline void PersonSecond::unsafe_arena_set_allocated_home(
    ::sample::Home2* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.home_);
  }
  _impl_.home_ = reinterpret_cast<::sample::Home2*>(value);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000008U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000008U);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sample.PersonSecond.home)
}
inline ::sample::Home2* PROTOBUF_NULLABLE PersonSecond::release_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  ClearHasBit(_impl_._has_bits_[0], 0x00000008U);
  ::sample::Home2* released = _impl_.home_;
  _impl_.home_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sample::Home2* PROTOBUF_NULLABLE PersonSecond::unsafe_arena_release_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sample.PersonSecond.home)

  ClearHasBit(_impl_._has_bits_[0], 0x00000008U);
  ::sample::Home2* temp = _impl_.home_;
  _impl_.home_ = nullptr;
  return temp;
}
inline ::sample::Home2* PROTOBUF_NONNULL PersonSecond::_internal_mutable_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.home_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sample::Home2>(GetArena());
    _impl_.home_ = reinterpret_cast<::sample::Home2*>(p);
  }
  return _impl_.home_;
}
inline ::sample::Home2* PROTOBUF_NONNULL PersonSecond::mutable_home()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000008U);
  ::sample::Home2* _msg = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:sample.PersonSecond.home)
  return _msg;
}
inline void PersonSecond::set_allocated_home(::sample::Home2* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.home_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    SetHasBit(_impl_._has_bits_[0], 0x00000008U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000008U);
  }

  _impl_.home_ = reinterpret_cast<::sample::Home2*>(value);
  // @@protoc_insertion_point(field_set_allocated:sample.PersonSecond.home)
}

// -------------------------------------------------------------------

// PeopleSecond

// repeated .sample.PersonSecond people = 1;
inline int PeopleSecond::_internal_people_size() const {
  return _internal_people().size();
}
inline int PeopleSecond::people_size() const {
  return _internal_people_size();
}
inline void PeopleSecond::clear_people() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.people_.Clear();
  ClearHasBitForRepeated(_impl_._has_bits_[0],
                  0x00000001U);
}
inline ::sample::PersonSecond* PROTOBUF_NONNULL PeopleSecond::mutable_people(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sample.PeopleSecond.people)
  return _internal_mutable_people()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sample::PersonSecond>* PROTOBUF_NONNULL PeopleSecond::mutable_people()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBitForRepeated(_impl_._has_bits_[0], 0x00000001U);
  // @@protoc_insertion_point(field_mutable_list:sample.PeopleSecond.people)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_people();
}
inline const ::sample::PersonSecond& PeopleSecond::people(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sample.PeopleSecond.people)
  return _internal_people().Get(index);
}
inline ::sample::PersonSecond* PROTOBUF_NONNULL PeopleSecond::add_people()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sample::PersonSecond* _add = _internal_mutable_people()->Add();
  SetHasBitForRepeated(_impl_._has_bits_[0], 0x00000001U);
  // @@protoc_insertion_point(field_add:sample.PeopleSecond.people)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sample::PersonSecond>& PeopleSecond::people() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sample.PeopleSecond.people)
  return _internal_people();
}
inline const ::google::protobuf::RepeatedPtrField<::sample::PersonSecond>&
PeopleSecond::_internal_people() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.people_;
}
inline ::google::protobuf::RepeatedPtrField<::sample::PersonSecond>* PROTOBUF_NONNULL
PeopleSecond::_internal_mutable_people() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.people_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sample


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // second_2eproto_2epb_2eh
