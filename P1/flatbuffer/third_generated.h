// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_THIRD_SAMPLE_H_
#define FLATBUFFERS_GENERATED_THIRD_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace Sample {

struct Born3;
struct Born3Builder;

struct Car3;
struct Car3Builder;

struct Home3;
struct Home3Builder;

struct PersonThird;
struct PersonThirdBuilder;

struct Born3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Born3Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATE = 4,
    VT_CITY = 6,
    VT_HOSPITAL_NAME = 8,
    VT_FATHER_NAME = 10
  };
  const flatbuffers::String *date() const {
    return GetPointer<const flatbuffers::String *>(VT_DATE);
  }
  const flatbuffers::String *city() const {
    return GetPointer<const flatbuffers::String *>(VT_CITY);
  }
  const flatbuffers::String *hospital_name() const {
    return GetPointer<const flatbuffers::String *>(VT_HOSPITAL_NAME);
  }
  const flatbuffers::String *father_name() const {
    return GetPointer<const flatbuffers::String *>(VT_FATHER_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATE) &&
           verifier.VerifyString(date()) &&
           VerifyOffset(verifier, VT_CITY) &&
           verifier.VerifyString(city()) &&
           VerifyOffset(verifier, VT_HOSPITAL_NAME) &&
           verifier.VerifyString(hospital_name()) &&
           VerifyOffset(verifier, VT_FATHER_NAME) &&
           verifier.VerifyString(father_name()) &&
           verifier.EndTable();
  }
};

struct Born3Builder {
  typedef Born3 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_date(flatbuffers::Offset<flatbuffers::String> date) {
    fbb_.AddOffset(Born3::VT_DATE, date);
  }
  void add_city(flatbuffers::Offset<flatbuffers::String> city) {
    fbb_.AddOffset(Born3::VT_CITY, city);
  }
  void add_hospital_name(flatbuffers::Offset<flatbuffers::String> hospital_name) {
    fbb_.AddOffset(Born3::VT_HOSPITAL_NAME, hospital_name);
  }
  void add_father_name(flatbuffers::Offset<flatbuffers::String> father_name) {
    fbb_.AddOffset(Born3::VT_FATHER_NAME, father_name);
  }
  explicit Born3Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Born3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Born3>(end);
    return o;
  }
};

inline flatbuffers::Offset<Born3> CreateBorn3(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> date = 0,
    flatbuffers::Offset<flatbuffers::String> city = 0,
    flatbuffers::Offset<flatbuffers::String> hospital_name = 0,
    flatbuffers::Offset<flatbuffers::String> father_name = 0) {
  Born3Builder builder_(_fbb);
  builder_.add_father_name(father_name);
  builder_.add_hospital_name(hospital_name);
  builder_.add_city(city);
  builder_.add_date(date);
  return builder_.Finish();
}

inline flatbuffers::Offset<Born3> CreateBorn3Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *date = nullptr,
    const char *city = nullptr,
    const char *hospital_name = nullptr,
    const char *father_name = nullptr) {
  auto date__ = date ? _fbb.CreateString(date) : 0;
  auto city__ = city ? _fbb.CreateString(city) : 0;
  auto hospital_name__ = hospital_name ? _fbb.CreateString(hospital_name) : 0;
  auto father_name__ = father_name ? _fbb.CreateString(father_name) : 0;
  return Sample::CreateBorn3(
      _fbb,
      date__,
      city__,
      hospital_name__,
      father_name__);
}

struct Car3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Car3Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODEL_NAME = 4,
    VT_FACTORY_YEAR = 6,
    VT_LICENSE_PLATE = 8
  };
  const flatbuffers::String *model_name() const {
    return GetPointer<const flatbuffers::String *>(VT_MODEL_NAME);
  }
  int32_t factory_year() const {
    return GetField<int32_t>(VT_FACTORY_YEAR, 0);
  }
  const flatbuffers::String *license_plate() const {
    return GetPointer<const flatbuffers::String *>(VT_LICENSE_PLATE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MODEL_NAME) &&
           verifier.VerifyString(model_name()) &&
           VerifyField<int32_t>(verifier, VT_FACTORY_YEAR) &&
           VerifyOffset(verifier, VT_LICENSE_PLATE) &&
           verifier.VerifyString(license_plate()) &&
           verifier.EndTable();
  }
};

struct Car3Builder {
  typedef Car3 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_model_name(flatbuffers::Offset<flatbuffers::String> model_name) {
    fbb_.AddOffset(Car3::VT_MODEL_NAME, model_name);
  }
  void add_factory_year(int32_t factory_year) {
    fbb_.AddElement<int32_t>(Car3::VT_FACTORY_YEAR, factory_year, 0);
  }
  void add_license_plate(flatbuffers::Offset<flatbuffers::String> license_plate) {
    fbb_.AddOffset(Car3::VT_LICENSE_PLATE, license_plate);
  }
  explicit Car3Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Car3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Car3>(end);
    return o;
  }
};

inline flatbuffers::Offset<Car3> CreateCar3(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> model_name = 0,
    int32_t factory_year = 0,
    flatbuffers::Offset<flatbuffers::String> license_plate = 0) {
  Car3Builder builder_(_fbb);
  builder_.add_license_plate(license_plate);
  builder_.add_factory_year(factory_year);
  builder_.add_model_name(model_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Car3> CreateCar3Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *model_name = nullptr,
    int32_t factory_year = 0,
    const char *license_plate = nullptr) {
  auto model_name__ = model_name ? _fbb.CreateString(model_name) : 0;
  auto license_plate__ = license_plate ? _fbb.CreateString(license_plate) : 0;
  return Sample::CreateCar3(
      _fbb,
      model_name__,
      factory_year,
      license_plate__);
}

struct Home3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Home3Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADDRESS = 4,
    VT_OWNERSHIP = 6
  };
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  const flatbuffers::String *ownership() const {
    return GetPointer<const flatbuffers::String *>(VT_OWNERSHIP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyOffset(verifier, VT_OWNERSHIP) &&
           verifier.VerifyString(ownership()) &&
           verifier.EndTable();
  }
};

struct Home3Builder {
  typedef Home3 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(Home3::VT_ADDRESS, address);
  }
  void add_ownership(flatbuffers::Offset<flatbuffers::String> ownership) {
    fbb_.AddOffset(Home3::VT_OWNERSHIP, ownership);
  }
  explicit Home3Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Home3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Home3>(end);
    return o;
  }
};

inline flatbuffers::Offset<Home3> CreateHome3(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> address = 0,
    flatbuffers::Offset<flatbuffers::String> ownership = 0) {
  Home3Builder builder_(_fbb);
  builder_.add_ownership(ownership);
  builder_.add_address(address);
  return builder_.Finish();
}

inline flatbuffers::Offset<Home3> CreateHome3Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *address = nullptr,
    const char *ownership = nullptr) {
  auto address__ = address ? _fbb.CreateString(address) : 0;
  auto ownership__ = ownership ? _fbb.CreateString(ownership) : 0;
  return Sample::CreateHome3(
      _fbb,
      address__,
      ownership__);
}

struct PersonThird FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PersonThirdBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_BORN = 6,
    VT_CARS = 8,
    VT_HOMES = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const Sample::Born3 *born() const {
    return GetPointer<const Sample::Born3 *>(VT_BORN);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Sample::Car3>> *cars() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Sample::Car3>> *>(VT_CARS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Sample::Home3>> *homes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Sample::Home3>> *>(VT_HOMES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_BORN) &&
           verifier.VerifyTable(born()) &&
           VerifyOffset(verifier, VT_CARS) &&
           verifier.VerifyVector(cars()) &&
           verifier.VerifyVectorOfTables(cars()) &&
           VerifyOffset(verifier, VT_HOMES) &&
           verifier.VerifyVector(homes()) &&
           verifier.VerifyVectorOfTables(homes()) &&
           verifier.EndTable();
  }
};

struct PersonThirdBuilder {
  typedef PersonThird Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(PersonThird::VT_NAME, name);
  }
  void add_born(flatbuffers::Offset<Sample::Born3> born) {
    fbb_.AddOffset(PersonThird::VT_BORN, born);
  }
  void add_cars(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Sample::Car3>>> cars) {
    fbb_.AddOffset(PersonThird::VT_CARS, cars);
  }
  void add_homes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Sample::Home3>>> homes) {
    fbb_.AddOffset(PersonThird::VT_HOMES, homes);
  }
  explicit PersonThirdBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PersonThird> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PersonThird>(end);
    return o;
  }
};

inline flatbuffers::Offset<PersonThird> CreatePersonThird(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<Sample::Born3> born = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Sample::Car3>>> cars = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Sample::Home3>>> homes = 0) {
  PersonThirdBuilder builder_(_fbb);
  builder_.add_homes(homes);
  builder_.add_cars(cars);
  builder_.add_born(born);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<PersonThird> CreatePersonThirdDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatbuffers::Offset<Sample::Born3> born = 0,
    const std::vector<flatbuffers::Offset<Sample::Car3>> *cars = nullptr,
    const std::vector<flatbuffers::Offset<Sample::Home3>> *homes = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto cars__ = cars ? _fbb.CreateVector<flatbuffers::Offset<Sample::Car3>>(*cars) : 0;
  auto homes__ = homes ? _fbb.CreateVector<flatbuffers::Offset<Sample::Home3>>(*homes) : 0;
  return Sample::CreatePersonThird(
      _fbb,
      name__,
      born,
      cars__,
      homes__);
}

inline const Sample::PersonThird *GetPersonThird(const void *buf) {
  return flatbuffers::GetRoot<Sample::PersonThird>(buf);
}

inline const Sample::PersonThird *GetSizePrefixedPersonThird(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Sample::PersonThird>(buf);
}

inline bool VerifyPersonThirdBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Sample::PersonThird>(nullptr);
}

inline bool VerifySizePrefixedPersonThirdBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Sample::PersonThird>(nullptr);
}

inline void FinishPersonThirdBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sample::PersonThird> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPersonThirdBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sample::PersonThird> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Sample

#endif  // FLATBUFFERS_GENERATED_THIRD_SAMPLE_H_
